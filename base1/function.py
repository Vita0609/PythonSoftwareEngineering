# В Python функции — это блоки кода, которые выполняют определенные действия и могут быть вызваны с разных частей программы. 
# Функции помогают избежать повторяющегося кода, повышают читаемость программы и облегчают ее отладку.

# Для создания функции в Python используется ключевое слово def. 
# Функция может принимать параметры и возвращать значения.
def function_name(parameters):
    # тело функции
    return result

# Пример функции:
def add_numbers(a, b):
    return a + b

result = add_numbers(3, 5)  # вызов функции
print(result)  # Выведет 8

                                 # Параметры функции
#Функции могут принимать параметры. Они могут быть обязательными или иметь значения по умолчанию.

# Пример с обязательными параметрами:
def multiply(a, b):
    return a * b

print(multiply(2, 3))  # Выведет 6

# Пример с параметрами по умолчанию:
def greet(name="Guest"):
    print(f"Hello, {name}!")

greet("Alice")  # Выведет Hello, Alice!
greet()  # Выведет Hello, Guest!

                                # Возвращаемые значения
#Функции могут возвращать значения с помощью оператора return. 
# Если функция не имеет оператора return, то она возвращает None.

# Пример с возвращаемым значением: 
def square(x):
    return x ** 2

result = square(4)  # result = 16

                             # Локальные и глобальные переменные
# Переменные, объявленные внутри функции, называются локальными. 
# Переменные, объявленные вне функции, называются глобальными. 
# Локальные переменные не могут быть использованы вне функции, 
# а глобальные — внутри функции (если они явно не перекрыты локальными переменными).

# Пример: 
x = 10  # глобальная переменная

def print_x():
    print(x)  # доступ к глобальной переменной

print_x()  # Выведет 10

                             # Пример рекурсивной функции (факториал):
def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)

print(factorial(5))  # Выведет 120

                             # Lambda-функции
# Lambda-функции — это анонимные функции, которые могут быть использованы для кратковременных операций. 
# Они могут содержать только одно выражение.
# lambda arguments: expression
multiply = lambda x, y: x * y
print(multiply(2, 3))  # Выведет 6

                          # Встроенные функции
# Python предоставляет много встроенных функций, таких как:

# print() len() input() sum()   max()  min()

# Функции могут принимать параметры, то есть некоторые значения, передаваемые внутрь функции для того, чтобы она что-то сделала с ними. 
# Эти параметры похожи на переменные, за исключением того, что значения переменных указываются при вызове функции, и при работе функции им уже присвоены их значения.
# Параметры указываются в скобках при объявлении функции и разделяются запятыми. 
# Аналогично мы передаем значение когда вызываем функцию.
# Обратите внимание на терминологию: имена, указанные при объявлении функции, 
# называются параметрами, а значения, которые вы передаете в функцию при ее вызове, – аргументами.
def print_max(a, b):
    if a > b:
        print(a, 'максимально')
    elif a == b:
        print(a, 'дорівнює', b)
    else:
        print(b, 'максимально')

print_max(3, 4)  # пряма передача значень

x = 5
y = 7
print_max(x, y)  # передача змінних у якості аргументів
 # Здесь мы определили функцию с именем print_max, использующую два параметра с именами a и b. 
 # Мы находим наибольшее число с использованием простого оператора if..else и выводим это число.
 #  При первом вызове функции print_max мы напрямую передаем числа в качестве аргументов.
print_max(3, 4)  # пряма передача значень

# Во втором случае мы вызываем функцию с переменными в качестве аргументов, 
# print_max(x, y) назначает значение аргумента x параметра a, а значение аргумента y – параметра b.
x = 5
y = 7
print_max(x, y)  # передача змінних у якості аргументів

# Неизменные типы в Python — это те, которые не могут быть изменены после их создания.

