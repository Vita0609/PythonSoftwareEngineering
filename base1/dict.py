# Словарь в Python — это неупорядоченная коллекция пар ключ-значение, где каждый ключ связан с определенным значением. 
# Ключи в словаре должны быть уникальными и неизменяемыми (например, строки, числа, кортежи), 
# в то время как значения могут быть любыми типами данных.

# Словарь создается с использованием фигурных скобок {}, где элементы разделяются двоеточием.
# Простой пример словаря
my_dict = {"name": "Alice", "age": 25, "city": "London"}

                                   # Доступ к элементам словаря
# Чтобы получить значение по ключу, можно использовать квадратные скобки [] или метод .get().
# Доступ к значению по ключу
print(my_dict["name"])  # Alice

# Использование метода get()
print(my_dict.get("age"))  # 25

                                   # Изменение значений
# Значения в словаре можно изменять, присваивая новое значение для существующего ключа.
my_dict["age"] = 26  # Изменим возраст на 26
print(my_dict)  # {'name': 'Alice', 'age': 26, 'city': 'London'}

                                     # Добавление новых элементов
# Чтобы добавить новую пару ключ-значение, нужно просто присвоить новое значение для нового ключа.
my_dict["email"] = "alice@example.com"
print(my_dict)  # {'name': 'Alice', 'age': 26, 'city': 'London', 'email': 'alice@example.com'}

                                    # Удаление элементов
#Для удаления элементов из словаря можно использовать:

# del — для удаления по ключу.
# .pop() — удаляет элемент и возвращает его значение.
# .clear() — очищает весь словарь.
# Удаление элемента по ключу
del my_dict["city"]

# Использование метода pop()
age = my_dict.pop("age")  # Возвращает удалённое значение
print(age)  # 26

# Очистка словаря
my_dict.clear()
print(my_dict)  # {}

                                        # Методы словаря
# Словари в Python поддерживают множество полезных методов для работы с ними:
# keys() — возвращает все ключи словаря.
my_dict = {"name": "Alice", "age": 25}
print(my_dict.keys())  # dict_keys(['name', 'age'])

# values() — возвращает все значения словаря.
print(my_dict.values())  # dict_values(['Alice', 25])

# items() — возвращает все пары (ключ, значение) в виде списка кортежей.
print(my_dict.items())  # dict_items([('name', 'Alice'), ('age', 25)])

# get() — позволяет безопасно получить значение по ключу (если ключ отсутствует, возвращает None или заданное значение по умолчанию).
print(my_dict.get("email", "not found"))  # not found

# update() — обновляет словарь, добавляя новые элементы или изменяя существующие, слияние двух словарей.
my_dict.update({"city": "London", "email": "alice@example.com"})
print(my_dict)

# popitem() — удаляет и возвращает произвольную пару ключ-значение.
print(my_dict.popitem())  # ('email', 'alice@example.com')

                                      # Перебор элементов словаря
 # Для перебора ключей и значений можно использовать цикл for:
# Перебор ключей
for key in my_dict:
    print(key)

# Перебор ключей и значений
for key, value in my_dict.items():
    print(key, value)

                                       # Вложенные словари
# Словари могут содержать другие словари, что позволяет создавать более сложные структуры данных.       
nested_dict = {
    "person1": {"name": "Alice", "age": 25},
    "person2": {"name": "Bob", "age": 30}
}

# Доступ к вложенным значениям
print(nested_dict["person1"]["name"])  # Alice

                                          # ПРИМЕР
# Создание и работа с словарем
student = {
    "name": "John",
    "age": 21,
    "subjects": ["Math", "Physics", "Chemistry"]
}

# Доступ к данным
print(student["name"])  # John

# Изменение данных
student["age"] = 22

# Добавление нового элемента
student["email"] = "john@example.com"

# Удаление элемента
del student["subjects"]

# Перебор всех элементов
for key, value in student.items():
    print(key, value)
                              
# Словари — это важный инструмент для работы с данными, когда необходимо хранить информацию в виде пар ключ-значение и быстро получать доступ к данным по ключу.                            