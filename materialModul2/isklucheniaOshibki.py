'''
Работа с исключениями в Python выполняется с помощью конструкций try, except, else и finally. 
Исключения позволяют обрабатывать ошибки, возникающие во время выполнения программы, и предотвращать её аварийное завершение.

Основной синтаксис конструкции try, except, else, finally состоит из следующих частей:

try: 
    # Код, который может вызвать исключение или ошибку.     
except ExceptionType: 
    # Код, который будет выполнен в случае возникновения исключения.     
else: 
    # Код, который будет выполнен в случае, если исключения не произошло.     
finally: 
    # Код, который будет выполнен в любом случае.
'''
# Пример 1: Обработка конкретного исключения
try:
    number = int(input("Введите число: "))
    result = 10 / number
    print(f"Результат: {result}")
except ZeroDivisionError:
    print("Ошибка: Деление на ноль невозможно!")
except ValueError:
    print("Ошибка: Вы должны ввести число!")

    '''
Как работает этот код:
try: Выполняется попытка выполнения кода. Если ошибок нет — программа продолжает работать.
except ZeroDivisionError: Перехватывает ошибку деления на ноль.
except ValueError: Перехватывает ошибку, если ввод некорректен (например, текст вместо числа).'''

# Пример 2: Использование блоков else и finally
try:
    number = int(input("Введите число: "))
    result = 10 / number
except ZeroDivisionError:
    print("Ошибка: Деление на ноль невозможно!")
except ValueError:
    print("Ошибка: Вы должны ввести число!")
else:
    print(f"Результат: {result}")  # Выполнится, если ошибок не было
finally:
    print("Спасибо, что воспользовались программой!")  # Выполнится всегда



# Пример 3: Генерация исключений (raise)
#Вы можете вручную вызывать исключения с помощью raise:
def divide(a, b):
    if b == 0:
        raise ValueError("Деление на ноль невозможно!")
    return a / b

try:
    print(divide(10, 0))
except ValueError as e:
    print(f"Ошибка: {e}")

# Пример 4: Создание пользовательских исключений
# Вы можете создавать свои классы исключений:
class NegativeNumberError(Exception):
    pass

def check_positive(number):
    if number < 0:
        raise NegativeNumberError("Число не может быть отрицательным!")
    return number

try:
    print(check_positive(-5))
except NegativeNumberError as e:
    print(f"Ошибка: {e}")

'''Советы:
Если вы не знаете, какая ошибка может возникнуть, используйте except без указания типа ошибки:

python
Копировать код
try:
    # Код
except:
    print("Произошла ошибка!")
Однако это нежелательно, так как может скрыть важные ошибки.

Исключения позволяют отделить основную логику программы от обработки ошибок, что делает код чище и более читаемым.'''