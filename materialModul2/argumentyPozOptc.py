'''Конечно! Давайте рассмотрим, как работают позиционные и опциональные аргументы в библиотеках sys и pathlib.

***Библиотека sys
Библиотека sys предоставляет доступ к параметрам и функциям, взаимодействующим с интерпретатором Python. Основные компоненты:

Позиционные аргументы
1. sys.argv: Это список, содержащий аргументы командной строки. Первый элемент — это имя скрипта, а остальные — переданные аргументы. '''
import sys
# Выводим все аргументы командной строки
for arg in sys.argv:
    print(arg)
'''
Опциональные аргументы
Опциональные аргументы можно обрабатывать с помощью библиотеки argparse, которая позволяет легко создавать интерфейсы командной строки.'''
import argparse

parser = argparse.ArgumentParser(description="Пример программы.")
parser.add_argument("--name", type=str, help="Ваше имя", default="Мир")
args = parser.parse_args()

print(f"Привет, {args.name}!")

'''
***Библиотека pathlib
Библиотека pathlib предлагает объектно-ориентированный подход к работе с системными путями.

Позиционные аргументы
При создании объектов Path вы можете передавать позиционные аргументы, представляющие пути к файлам или директориям.'''
from pathlib import Path

# Создаем объект Path
path = Path("/path/to/directory")

# Выводим информацию о пути
print(path.exists())

'''Опциональные аргументы
Методы pathlib часто имеют опциональные аргументы, которые можно использовать для настройки поведения.'''
from pathlib import Path

# Создание объекта Path
path = Path(".")

# Вывод всех файлов в директории с фильтрацией
for file in path.iterdir():
    if file.is_file() and file.suffix == ".txt":  # Опциональный аргумент для фильтрации
        print(file.name)

'''Вывод:
sys: используется для получения аргументов командной строки, где sys.argv является основным способом доступа к позиционным аргументам.
pathlib: предоставляет удобный способ работы с файловыми системами, где позиционные аргументы используются для создания объектов Path, а опциональные аргументы могут быть использованы в методах для настройки их поведения.
Таким образом, обе библиотеки имеют свои уникальные особенности для работы с аргументами. Если у вас есть дополнительные вопросы или нужна помощь, дайте знать!'''

'''1. Позиционные и опциональные аргументы
В Python функции могут принимать два типа аргументов:

Позиционные аргументы — это аргументы, которые передаются в функцию в том порядке, в котором они указаны в определении функции. Когда вы вызываете функцию, вы передаете аргументы в том порядке, в котором они ожидаются.
Пример:'''
def add(a, b):  # a и b — позиционные аргументы
    return a + b

result = add(3, 5)  # 3 и 5 передаются как позиционные аргументы
print(result)  # 8

'''Опциональные (или ключевые) аргументы — это аргументы, которые имеют значения по умолчанию. Их не обязательно передавать при вызове функции. Если они не переданы, используется значение по умолчанию.
Пример:'''
def greet(name, greeting="Hello"):  # greeting — опциональный аргумент
    return f"{greeting}, {name}!"

print(greet("John"))  # Используется значение по умолчанию для greeting
print(greet("Alice", "Hi"))  # greeting переопределен

'''**Аргументы с переменной длиной (аргументы *args и kwargs):

*args позволяет передавать переменное количество позиционных аргументов.
**kwargs позволяет передавать переменное количество ключевых аргументов.
Пример:'''
def show_info(*args, **kwargs):
    print("Позиционные аргументы:", args)
    print("Ключевые аргументы:", kwargs)

show_info(1, 2, 3, name="Alice", age=25)




