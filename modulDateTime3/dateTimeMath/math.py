'''
                         ***Модуль math***
Пакет math в Python предоставляет доступ к математическим функциям, определенным стандартом языка C. Этот пакет включает функции для различных математических операций, включая тригонометрические вычисления, логарифмы, квадратный корень и другое.



Рассмотрим некоторые из ключевых функций и констант, которые предоставляет этот пакет:

Константы:
math.pi – константа
π
π (примерно 3.14159...);
math.e – константа
e
e, основа натуральных логарифмов (приблизительно 2.71828...);
math.tau - константа
τ
τ, равно
2
π
2π (приблизительно 6.28318...);
math.inf – обозначение бесконечности;
math.nan – обозначение 'Not a Number' (не число);

Функции округления чисел:
math.ceil(x) - выполняет округление действительного числа x до ближайшего большего целого числа;
math.floor(x) - выполняет округление действительного числа x до ближайшего меньшего целого числа;
math.trunc(x) - выполняет обрезку дробной части действительного числа x и возвращает целую часть числа;

Пример использования:'''
import math

# Исходное число
x=3.7

# Использование различных методов округления
ceil_result = math.ceil(x) # Округление вверх
floor_result = math.floor(x) # Округление вниз
trunc_result = math.trunc(x) # Отсечение дробной части

print(ceil_result, floor_result, trunc_result) # 4 3 3

'''Тригонометрические функции
math.sin(x) – синус x, где x в радианах;
math.cos(x) – косинус x;
math.tan(x) – тангенс x;
math.asin(x) - арксинус x;
math.acos(x) - арккосинус x;
math.atan(x) – арктангенс x;

Экспоненциальные и логарифмические функции
math.exp(x) - число
e
e в степени x;
math.log(x[,base]) – логарифм x по основанию base. Если base не указано, вычисляется натуральный логарифм;

Степень и корень
math.pow(x, y) – x в степени y;
math.sqrt(x) – квадратный корень из x;


Некоторые другие функции
math.fabs(x) – модуль (абсолютное значение) x;
math.factorial(x) – факториал числа x;
math.gcd(x, y) - самый общий делитель для x и y;

Пример использования пакета math'''
import math

# Использование констант
print(math.pi) # Выведет приблизительное значение π  Выведет 3.141592653589793

# Тригонометрия
angle = math.radians(60) # Конвертация из градусов в радианы
print(math.sin(angle)) # Синус угла  Выведет 0.8660254037844386

# Корень числа
print(math.sqrt(9)) # Квадратный корень из 9  Выведет 3.0

# Логарифмы
print(math.log(10, 2)) # Логарифм 10 по основанию 2 Выведет 3.3219280948873626

'''Если вам нужна комплексная математика, можно воспользоваться пакетом cmath. Он предоставляет тот же API, но умеет работать с комплексными числами.'''

'''
                        ****Правильное сравнение действительных чисел****
Действительные числа в компьютерных программах часто могут вызвать неточности из-за их бинарной природы. Это может привести к неожиданному поведению при сравнении чисел. Рассмотрим несколько примеров и способы их сравнения в Python.
Выполним следующее прямое сравнение'''
print(0.1 + 0.2 == 0.3)  # Це повертає False
# Этот код возвращает False из-за неточности в представлении действительных чисел в современных компьютерах. Числа 0.1 и 0.2 не могут быть представлены точно как двоичные дроби внутри компьютера, поэтому их сумма не будет точно равна 0.3.
print(0.1 + 0.2) # 0.30000000000000004

'''Функция math.isclose используется для сравнения двух чисел с определенной допустимой погрешностью. Это полезно для сравнения действительных чисел, где прямое сравнение может быть ненадежным.'''
import math

r = math.isclose(0.1 + 0.2, 0.3)
print(r)  # Це поверне True

# Также мы можем выполнять сравнение с маленькой погрешностью:
import math

r = math.isclose(0.1, 0.10000000009)
print(r)  # Це поверне True

'''В этом примере math.isclose снова используется для сравнения двух чисел, где второе число отличается от первого на очень малую величину.
Эти примеры показывают, как эффективно сравнивать действительные числа в Python, избегая распространенных ловушек, связанных с точностью представления этих чисел.'''

