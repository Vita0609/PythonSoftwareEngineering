'''
                           ***Работа со случайными величинами***
Работа со случайными величинами является важной частью многих областей, включая статистику, инженерию, науку о данных и финансах. Случайная величина – это переменная, значение которой является результатом случайных явлений или экспериментов. Есть два основных типа случайных величин: дискретные и непрерывные.

Дискретные случайные величины: Это принимающие ограниченное количество значений или значения, которые можно перечислить. Например, количество монет, выпавших решкой в ​​серии подбрасывания, является дискретной случайной величиной.
Непрерывные случайные величины: Они могут принимать любое значение в определенном диапазоне. Например, переменная, представляющая время, необходимое для выполнения определенной задачи, является непрерывной случайной величиной.

Работа со случайными величинами в программировании является ключевым элементом многих программных приложений, от игр до научных симуляций. Для генерации случайных (псевдослучайных) чисел в Python есть пакет random. Он достаточно хорош для ряда обычных задач, но не для криптографии. Ибо к сожалению, встроенный генератор псевдослучайных чисел довольно скоро начинает повторяться и недостаточно криптостойким. Однако для прикладных задач вне сферы криптографии его вполне хватает. Рассмотрим основные методы пакета, которые могут нам понадобиться в работе.

Для получения случайного целого числа из равномерного распределения в интервале между a и b включительно следует использовать метод random.randint(a, b). Он возвращает случайное целое число N такое, что a <= N <= b:'''
import random
random.randint(1, 1000)
# Это метод, например, подходит для симуляции броска кубика:
import random
dice_roll = random.randint(1, 6)
print(f"Ви кинули {dice_roll}") # Ви кинули 2

'''Метод random.random() требуется, чтобы получить случайное число в интервале 0, 1. Он генерирует случайное действительное число между 0.0 (включительно) и 1.0 (не включительно):'''
import random

num = random.random()
print(num) # 0.7189476089786198

'''Поскольку это случайное число вывод каждый раз будет другим.
Предположим, вам нужно симулировать случайное заполнение. Можно использовать random.random() для этого:'''
import random
fill_percentage = random.random() * 100
print(f"Заповнення: {fill_percentage:.2f}%") # Заповнення: 64.01%
# Здесь в f строке появилось форматирование {fill_percentage:.2f} указывающее, как отображать переменную fill_percentage. Выражение .2 это количество знаков после десятичной точки. В этом случае указано, что нужно отображать два символа для действительного числа. Символ f означает, что число должно отображаться в формате действительного числа.

'''
☝ Процент – это способ выражения числа как части из ста. Один процент, записанный как 1%, является эквивалентом 1/100 или одной сотой части. Итак, когда мы говорим, что что-то составляет 50%, это означает 50 из 100 или половину целого.
Чтобы превратить процент в дробь, делим число на 100. К примеру, 20% станет 20/100 или 0.20. Для превращения дроби в процент умножаем ее на 100. Так, 0.20 станет 20%.

Метод random.randrange(start, stop[, step]) возвращает случайно выбранное число из заданного диапазона.

Параметры метода:
start – нижний предел диапазона (включительно). Это первоначальное значение, с которого может начинаться случайный выбор. Если не указано, по умолчанию принимается нуль и диапазон начинается с 0.
stop – верхний предел диапазона (не включительно). Это означает, что выбранное случайное число будет меньше этого значения. Этот параметр обязателен, и метод не будет работать без него.
step – шаг между возможными значениями. Например, если установить step в качестве 2, метод будет выбирать только четные числа или числа, кратные 2, в зависимости от start. Этот параметр является необязательным и по умолчанию равняется 1, что означает, что выбор происходит из всех последовательных чисел в диапазоне.

Поэтому чтобы выбрать случайное число от 0 до 9:'''
import random
print(random.randrange(10))  # Верхня межа є 10, але не включається
'''Например, симуляция выстрела по мишени, но необходимо выбрать случайный номер от 1 до 10, и только нечетные числа:'''
import random

target = random.randrange(1, 11, 2)
print(f"Ціль: {target}") # Ціль: 3

'''метод random.shuffle(x)
Когда у вас есть список объектов и вам нужно перемешать порядок элементов в этом списке на случайный, мы используем метод random.shuffle(x), где x – список, который нужно перемешать.
Перемешивание бревна карт:'''
import random

cards = ["Туз", "Король", "Дама", "Валет", "10", "9", "8", "7", "6"]

random.shuffle(cards)

print(f"Перемішана колода: {cards}")
# Перемішана колода: ['Дама', 'Валет', 'Туз', '9', '6', 'Король', '10', '7', '8']

''' метод random.choice(seq)
Если нужно выбрать случайный элемент из списка, нам нужно использовать метод random.choice(seq), где seq – последовательность для выбора: список или кортеж.
Выбор случайного фрукта:'''
import random

fruits = ['apple', 'banana', 'orange']
print(random.choice(fruits)) # banana

'''метод random.choices()
Чтобы выбрать более чем один случайный элемент из списка, нам необходим метод random.choices(). Он используется для генерации случайной выборки из последовательности. Этот метод может вернуть один или несколько элементов из указанной последовательности, позволяя при этом повторение элементов в выборке.
Синтаксис метода random.choices():'''
random.choices(population, weights=None, cum_weights=None, k=1)

'''population – последовательность список, из которой должен быть сделан выбор.
weights – опциональный список, указывающий вероятности (веса) каждого элемента в списке population. Эти весы определяют, насколько возможно, что конкретный элемент будет выбран. Длина списка weights должна быть равна длине списка population.
cum_weights – тоже опциональный список кумулятивных весов. Если он указан, список weights игнорируется. Кумулятивный вес каждого элемента определяется как сумма его веса плюс вес всех предыдущих элементов.
k: Количество элементов для выбора. По умолчанию k=1.
Простой выбор случайного элемента из списка:'''
import random

items = ['яблуко', 'банан', 'вишня', 'диня']
chosen_item = random.choices(items, k=1)
print(chosen_item)   # ['диня']

'''Вибір декількох елементів з можливістю повторень:'''
import random

numbers = [1, 2, 3, 4, 5]
chosen_numbers = random.choices(numbers, k=3)
print(chosen_numbers) # [3, 3, 5]

'''Выбор с весами'''
import random

colors = ['червоний', 'зелений', 'синій']
weights = [10, 1, 1]
chosen_color = random.choices(colors, weights, k=1)
print(chosen_color)  # ['червоний']

'''random.choices() - это гибкий метод создания случайных выборок с возможностью указания вероятностей для каждого элемента и возможностью повторений в выборке.
Если возникает необходимость выбрать N элементов из списка и они при этом не повторялись, нужно использовать метод random.sample(population, k). Он возвращает список длиной k с уникальными элементами, выбранными случайно из population.'''

'''Создание случайной команды из 4 участников из группы из 10 человек:'''
import random

participants = ['Анна', 'Богдан', 'Віктор', 'Галина', 'Дмитро', 'Олена', 'Женя', 'Зорян', 'Ігор', 'Йосип']
team = random.sample(participants, 4)
print(f"Команда: {team}") # Команда: ['Анна', 'Віктор', 'Олена', 'Галина']

'''Обратите внимание, что k не может быть больше длины участника.

Последний полезный метод, рассмотрим это random.uniform(a, b). Метод возвращает случайное действительное число N, такое что a<=N<=b.
Пример генерации случайной цены для продукта в пределах от 50 до 100:'''
import random

price = random.uniform(50, 100)
print(f"Випадкова ціна: {price:.2f}") # Випадкова ціна: 69.64

'''Ключевые аспекты: методы работы со случайными величинами

random.randint(a, b): Получение случайного целого числа из равномерного распределения в интервале между a и b включительно.
random.random(): Получение случайного числа в интервале между 0.0 (включительно) и 1.0 (не включительно).
random.randrange(start, stop[, step]): Получение случайного числа из заданного диапазона, с возможностью указать шаг между значениями.
random.shuffle(x): Перемещение порядка элементов в списке x.
random.choice(seq): Выбор случайного элемента из последовательности seq (списка или кортежа).
random.choices(population, weights=None, cum_weights=None, k=1): генерация случайной выборки с возможностью указать вероятности для каждого элемента и повторение в выборке.
random.sample(population, k): Получение уникальных случайных элементов из списка population длиной k.
random.uniform(a, b): Получение случайного действительного числа N такого, что a <= N <= b.'''








