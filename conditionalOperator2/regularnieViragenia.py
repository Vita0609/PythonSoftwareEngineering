'''Регулярные выражения


Регулярные выражения (regular expressions, часто сокращающиеся как regex или regexp) – это мощный инструмент для работы с текстом, позволяющий искать, заменять или извлекать определенные шаблоны в тексте с помощью специального синтаксиса. Регулярные выражения широко используются в программировании, обработке текста, а также различных программах и инструментах для работы с данными.

Основные компоненты регулярных выражений включают в себя:

Литералы. Прямое отображение символов (например, a, B, 1).
Метасимволы. Символы, имеющие особое значение в регулярных выражениях (например, . (точка) соответствует любому символу).
Квантификаторы. Определяют, сколько раз элемент должен соответствовать (например, * означает 0 или более повторений).
Классы символов. Определяют группы символов (например, [a-z] соответствует любой строчной букве).
Группы и диапазоны. Используются для группировки частей выражения (например (abc) определяет группу символов).
Альтернация. Соответствует одному из нескольких шаблонов (например, a|b соответствует a или b).
Якоря. Определяют позиции в тексте (например, ^ для начала строки, $ для конца строки).


Регулярные выражения могут быть достаточно сложными, но они очень мощны для расширенного поиска и обработки текста. Они широко используются во многих языках программирования, а не только в Python.



Регулярные выражения позволяют искать определенные шаблоны в строках, производить замены, разбивать строки на части и многое другое. Для работы с регулярными выражениями в Python используется модуль re.


Основные функции модуля re которые мы рассмотрим далее:

re.search(pattern, string) – выполняет поиск первого вхождения шаблона в строке.
re.findall(pattern, string) – выполняет нахождение всех вхождений шаблона в строке.
re.sub(pattern, repl, string) – выполняет замену вхождений шаблона на другую строку.
re.split(pattern, string) производит разбивание строки по шаблону.

Основная задача регулярных выражений — это поиск строки или подстроки, соответствующей описанию в терминах регулярных выражений.

Используя этот механизм можно делать следующие операции:

проверять, что строка отвечает некоторым требованиям (это номер телефона или email);
разделять строки на подстроки по некоторому выражению (разбить текст на предложение, используя все знаки препинания, а не только какой-то один);
заменять подстроку в строке (заменить все начинающиеся слова на некоторую последовательность);
находить подстроку в строке, соответствующей выражению.


Регулярные выражения находят применение во многих областях, включая обработку текста, валидацию данных, парсинг и скрапинг веб-страниц, поиск и замена в текстовых редакторах и многое другое. Они являются мощным инструментом для любого программиста, работающего с текстовыми данными.

Регулярное выражение или коротко "регулярка" состоит из обычных символов и специальных командных последовательностей. Например, задает любую цифру, а задает любую последовательность из одной или более цифр. Это называется шаблоны регулярных выражений.

Регулярные выражения используют специальные символы для создания шаблонов. Они состоят из блоков и модификаторов.

Примером блока может служить:
\w - любая цифра или буква [a-zA-Z0-9_] (\W - все, кроме буквы или цифры [^a-za-z0-9_])
\d - любая цифра [0-9] (\D - все, кроме цифры [^0-9])
\s — любой пробельный символ [\t\n\r\f\v] (\S — все, кроме пробельных символов [^\t\n\r\f\v])
\b — предел слова
[...] — один из символов в скобках ([^ ] — любой символ, кроме тех, что в скобках)
^ и $ — начало и конец строки соответственно
( ) — группирует выражение и возвращает найденный текст
\t, \n, \r — символ табуляции, новой строки и возвращение каретки


Модификаторы могут указывать на количество повторений блока в выражении, например:
. — один любой символ, кроме строки \n
? - 0 или 1 вхождение шаблона слева
+ — 1 и более вхождений шаблона слева
* — 0 и более вхождений шаблона слева
\ — экранирование спец.символов (пример: \. — означает точку или \+ — знак "плюс")
{n} строго n раз (n целое число)
{n,m} - от n до m вхождений (пример: {,m} - от 0 до m)
a|b - соответствует a или b. Сам символ означает "или" между двумя шаблонами
( ) — группирует выражение и возвращает найденный текст


Каждый элемент позволяет создавать гибкие и мощные шаблоны поиска в тексте с помощью регулярных выражений. Именно составление регулярных выражений — это очень большая тема для отдельного изучения. Но базовые принципы создания регулярных выражений мы с вами разберем.

☝ Вот хорошая статья на тему регулярных выражений, там много примеров и полезных ссылок.
Для работы с регулярными выражениями у Python есть стандартный модуль re. Чтобы воспользоваться этим модулем, его нужно сначала импортировать:

import re
Общим для всех функций модуля re является то, что первым аргументом следует регулярное выражение в виде строки.

----Метод search
Модуль re у Python предоставляет инструменты для работы с регулярными выражениями. Одна из основных функций этого модуля – re.search(), которая используется для поиска первого вхождения шаблона в строке.Регулярное выражение – это шаблон, используемый для нахождения определенных комбинаций символов в строках.
re.search(pattern, string)
pattern: Регулярное выражение (шаблон), которое вы хотите найти.
string: Строка, в которой вы хотите найти шаблон.


Результат выполнения re.search() это специальный объект Match, если находит соответствие. Если соответствие не найдено, возвращает None.

Объект Match обладает свойствами и методами, используемыми для получения информации о поиске и результатах:

Match.span() возвращает кортеж, содержащий начальную и конечную позиции совпадения.
Match.string возвращает строку, передаваемую в функцию,
Match.group() возвращает часть строки, в которой было совпадение


Вы можете использовать метод .group() в этом объекте, чтобы получить соответствующую часть строки.

Тесты 
1. Який метод у Python використовується для заміни входжень патерну у рядку?
re.sub()
2. Яка функція Python використовується для знаходження всіх входжень патерну у рядку?
re.findall()
3. Що символізує символ ^ у регулярних виразах?
Початок рядка
4. Як у Python представити будь-який один символ у регулярному виразі?
.
5. Що робить вираз f"{value:%}" у форматуванні рядків Python?
Конвертує value в відсоток
6. Що робить метод split() у Python?
Розділяє рядок на список підрядків на основі розділювача
7. Які символи в регулярному виразі Python відповідають будь-якій цифрі та будь-якій букві відповідно?
\d та \w
8. Як у регулярних виразах Python позначається група символів, яка може зустрічатися 0 або більше разів?
*
9. У регулярних виразах Python, яка функція використовується для пошуку першого входження шаблону в рядку?
re.search()





'''