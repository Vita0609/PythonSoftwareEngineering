                       # Области видимости (LEGB)
# Область видимости – это область в программе (коде), в пределах которой вы можете обратиться по имени к содержимому переменной. 
# Эти области видимости делятся на четыре уровня в порядке поиска переменных имен, и известны как LEGB-правило:

# L – Local (Локальная): Это внутренний уровень, где имя определено внутри функции или блока кода.
# E – Enclosing (Охватываемая): Это область видимости, охватывающая локальную область видимости. 
# Если функция находится внутри другой функции, имена, определенные в охватываемой функции, будут доступны внутренней функции.
# G – Global (Глобальная): Это область видимости на уровне модуля или сценария. Переменные, определенные на этом уровне, доступны во всем модуле.
# B – Built-in (Встроенная): Это самый внешний уровень, содержащий имена, встроенные в Python. Например, рассмотренные нами встроенные функции, len, range и т.д.

                                ### Local
# В Python каждая переменная, объявленная внутри функции, локальна для этой функции. 
# Это означает, что локальные переменные существуют только в пределах кода, где они были объявлены, и не доступны за его пределами.
x = 50

def func() -> None:
    x = 2
    print('Зміна локального x на', x)  # Зміна локального x на 2

func()
print('Глобальний x як і раніше', x)  # x як і раніше 50
# Змінна x, оголошена всередині функції func, є локальною. 
# Коли ми присвоюємо їй значення 2, це не впливає на глобальну змінну x, оголошену поза функцією. 
# Тому, після виклику func(), виведення залишає глобальне значення x (яке дорівнює 50) незмінним.
# Останнім викликом функції print ми виводимо значення x, вказане в основному блоці, підтверджуючи таким чином, що воно не змінилося при локальному присвоюванні значення в раніше викликаній функції.
# Виведення: Зміна локального x на 2 Глобальний x як і раніше 50

                                   ### Enclosing
# Охватываемая область видимости возникает, когда функция определена внутри другой функции. 
# Переменные в функции, охватывающие доступные во внутренней (вложенной) функции, но не наоборот. 
# Это означает, что внутренняя функция может читать но не изменять переменные, определенные в охватывающей ее функции.
# Розглянемо наступний приклад:
def outer_func():
    enclosing_var = "Я змінна в функції, що охоплює"

    def inner_func():
        print("Всередині вкладеної функції:", enclosing_var)

    inner_func()

outer_func()
# Вывод: Внутри вложенной функции: Я переменна в охватывающей функции

# Здесь enclosing_var переменной в функции outer_func, охватывающей функцию inner_func. 
# Она доступна для чтения во вложенной функции inner_func, но не может изменяться в inner_func без использования ключевого слова nonlocal.
# Для того чтобы разобраться как изменять переменные в функции, охватывающие внутреннюю функцию, рассмотрим пример:
def func_outer():
    x = 2

    def func_inner():
        nonlocal x
        x = 5

    func_inner()
    return x

result = func_outer()  # 5
# Когда мы находимся внутри функции func_inner, переменная x, определенная в первой строке функции func_outer, находится в enclosing области видимости для нее. ,
#  которую она будет менять, не локальна для func_inner, а находится на более высоком уровне — в нашем случае, в func_outer. 
# Поэтому, когда func_inner изменяет x на 5, это изменение отображается на x в func_outer.

# Поэтому результат result будет равен 5, а не 2, поскольку внутри функции func_outer мы совершили вызов func_inner(), которая изменила x с 2 на 5.

                                               ### Global
# Чтобы изменить глобальную переменную внутри функции, необходимо использовать ключевое слово global. 
# Это указывает Python, что переменная не локальная, а относится к глобальной области видимости. 
# Без применения зарезервированного слова global невозможно присвоить значение переменной, определенной вне функции.  
x = 50

def func():
    global x
    print('x дорівнює', x)  # x дорівнює 50
    x = 2
    print('Змінюємо глобальне значення x на', x)  # Змінюємо глобальне значення x на 2

func()
print('Значення x складає', x)# Значення x складає 2
# Виведення: x дорівнює 50 Змінюємо глобальне значення x на 2 Значення x складає 2    


# Зарезервированное слово global используется для того, чтобы объявить, что x – это глобальная переменная, а значит, когда мы присваиваем значение имени x внутри функции, это изменение отразится на значении переменной x в основном блоке программы.
#  Используя одно зарезервированное слово global, можно объявить сразу несколько переменных: global x, y, z.
# Использовать global следует с большой осторожностью и не нужно злоупотреблять такой возможностью.
# Понимание этих основных принципов важно для эффективного написания кода и избегания ошибок, связанных с неправильным использованием переменных. 
# Локальные переменные полезны для обеспечения инкапсуляции данных внутри функций, в то время как глобальные переменные позволяют хранить данные, требуемые на разных этапах выполнения программы.
