# range, enumerate та zip

                                         # Функция Range
# Функция range важна для создания последовательностей чисел, которые можно использовать в циклах. 
# Она очень полезна, когда вам нужно выполнить действие определенное количество раз или итерировать через последовательность чисел.
# Функция range в сочетании с циклом for Python является мощным инструментом для контроля повторения действий определенное количество раз.
# Этот механизм часто используется для итерации из-за последовательности чисел, что делает его особенно полезным для различных задач, от базовых до сложных алгоритмов.
# Функция range создает последовательность чисел. Она может быть использована разными способами:

# range(stop): Создает последовательность чисел от 0 до stop – 1.
# range(start, stop): Генерирует числа от start к stop – 1.
# range(start, stop, step): Создает числа от start к stop – 1, с шагом step.
for i in range(5):
    print(i)

# В этом примере range(5) генерирует последовательность чисел от 0 до 4. 
# Цикл for проходит по этой последовательности и переменная i принимает значения каждого числа в последовательности поочередно. 
# Это был пример простой итерации.

# Итерация с определенным началом и концом итерации. Пример вывода чисел от 2 до 9.
for i in range(2, 10):
    print(i)
# Итерация с шагом. Этот пример выведет четные числа от 0 до 8.
for i in range(0, 10, 2):
    print(i)

# Функция range вместе с циклом for является основой для структурированного повторения кода и важной частью многих алгоритмов и программ в Python. 
# Они позволяют легко манипулировать последовательностями чисел для решения разнообразных задач.

                                           # Функция Enumerate
# Функция enumerate используется для одновременного получения индекса и значения элементов итерируемого объекта. 
# Это полезно, когда вам нужно получить доступ к индексу элементов во время итерации.
some_list = ["apple", "banana", "cherry"]
for index, value in enumerate(some_list):
    print(index, value)
# В этом примере enumerate(some_list) создает пары индекс-значения для каждого элемента в списке и цикл for проходит по этим парам.

# Вывод: 
# 0 apple
# 1 banana
# 2 cherry
 
                                             # Функция Zip
# Функция zip используется для итерации по нескольким итерированным объектам одновременно.
list1 = ["зелене", "стигла", "червоний"]
list2 = ["яблуко", "вишня", "томат"]
for number, letter in zip(list1, list2):
    print(number, letter)
# В этом случае zip(list1, list2) объединяет элементы из list1 и list2, и цикл for проходит по созданному словосочетанию.

# Вывод:
# зелене яблуко
# стигла вишня
# червоний томат

# Когда коллекции, передаваемые в zip, имеют разную длину, zip обрабатывает элементы до тех пор, пока не закончатся элементы в кратчайшей коллекции. 
# Это означает, что итерация прекращается, как только достигнут конец одной из коллекций, и любые дополнительные элементы в других, более длинных коллекциях, игнорируются.
list1 = [1, 2, 3]
list2 = ['a', 'b', 'c', 'd', 'e']

for number, letter in zip(list1, list2):
    print(number, letter)
# В этом примере list1 имеет 3 элемента, в то время как list2 имеет 5 элементов. 
# Поскольку list1 короче, zip прекратит итерацию после третьей пары значений.
#  Результат будет: 1 a 2 b 3 c

# Элементы 'd' и 'e' из list2 будут проигнорированы.

# Поэтому аккуратно используйте zip с очень большими коллекциями, поскольку избыточные элементы игнорируются,
#  что может привести к потере данных или непредвиденным результатам, если этот аспект игнорировать.


