# Коллекции в Python включают такие структуры данных, как списки, кортежи, словари и множества. 
# Каждый тип коллекции имеет свои методы, позволяющие эффективно работать с данными.

                                  # Списки (List)
# Списки — это изменяемые коллекции, которые могут содержать элементы различных типов. Некоторые методы списков:

# .append() — добавляет элемент в конец списка:
my_list = [1, 2, 3]
my_list.append(4)
print(my_list)  # [1, 2, 3, 4]

# .remove(item) — удаляет первое вхождение элемента item из списка:
my_list = [1, 2, 3]
my_list.remove(2)
print(my_list)  # [1, 3]

# .pop(index) — удаляет элемент по индексу и возвращает его:
my_list = [1, 2, 3]
removed_item = my_list.pop(1)
print(removed_item)  # 2
print(my_list)  # [1, 3]

# .sort() — сортирует список:
my_list = [3, 1, 2]
my_list.sort()
print(my_list)  # [1, 2, 3]

                                        #Кортежи (Tuple)
# Кортежи — это неизменяемые последовательности, которые могут содержать элементы различных типов. Основные методы:

# .count(value) — возвращает количество вхождений элемента в кортеж: 
my_tuple = (1, 2, 3, 1)
print(my_tuple.count(1))  # 2

# .index(value) — возвращает индекс первого вхождения элемента:
my_tuple = (1, 2, 3)
print(my_tuple.index(2))  # 1

                                       # Словари (Dictionary)
# Словари представляют собой неупорядоченные коллекции пар "ключ-значение". Методы словарей:

# .get(key) — возвращает значение по ключу, если ключ не существует, возвращает None или заданное значение:
my_dict = {"name": "Alice", "age": 25}
print(my_dict.get("name"))  # Alice
print(my_dict.get("city"))  # None

# .keys() — возвращает все ключи словаря:
my_dict = {"name": "Alice", "age": 25}
print(my_dict.keys())  # dict_keys(['name', 'age'])

# .values() — возвращает все значения словаря:
my_dict = {"name": "Alice", "age": 25}
print(my_dict.values())  # dict_values(['Alice', 25])

# .update(other_dict) — обновляет словарь с помощью значений из другого словаря:
my_dict = {"name": "Alice"}
other_dict = {"age": 25}
my_dict.update(other_dict)
print(my_dict)  # {'name': 'Alice', 'age': 25}

                                          # Множества (Set)
# Множества представляют собой коллекции уникальных элементов. Основные методы:

# .add(value) — добавляет элемент в множество:
my_set = {1, 2, 3}
my_set.add(4)
print(my_set)  # {1, 2, 3, 4}

# .remove(value) — удаляет элемент из множества. Если элемент не найден, вызывает ошибку:
my_set = {1, 2, 3}
my_set.remove(2)
print(my_set)  # {1, 3}

# .union(other_set) — возвращает объединение двух множеств:
set1 = {1, 2, 3}
set2 = {3, 4, 5}
print(set1.union(set2))  # {1, 2, 3, 4, 5}

# .intersection(other_set) — возвращает пересечение двух множеств:
set1 = {1, 2, 3}
set2 = {2, 3, 4}
print(set1.intersection(set2))  # {2, 3}

# Работа со строками и коллекциями в Python позволяет эффективно манипулировать данными. 
# Строки предлагают множество методов для обработки текста, в то время как коллекции,
# такие как списки, кортежи, множества и словари, имеют свои методы для хранения и манипулирования элементами.